# ============================================================================
# go-ethereum DevNet Services
# ============================================================================
# This Docker Compose file defines a complete local development environment
# for go-ethereum with two primary services:
# 1. A single Ethereum node running in development mode
# 2. A alltools container with all Ethereum CLI utilities available
#
# Environment Variables:
# - All configuration can be customized through environment variables
# - See ci/.env.example for available options and default values
# - Required variables: REGISTRY_URL, REGISTRY_USERNAME, REGISTRY_TOKEN
#
# Image Pulling Behavior:
# - The services always pull the latest version from the registry for the specified branch
# - The branch is determined by BRANCH_NAME in the .env file (defaults to 'master')
# - This ensures you always have the most recent code for your development branch
# ============================================================================

services:
  # ============================================================================
  # Ethereum Development Node Service
  # ============================================================================
  # This service runs a full Ethereum node in development mode with:
  # - HTTP and WebSocket RPC endpoints
  # - P2P networking disabled for local development
  # - Automatic restart on failure
  # - Health monitoring
  # ============================================================================
  node:
    build:
      context: ..         # Build context is the project root directory
      dockerfile: ./ci/Dockerfile  # Using the master Dockerfile for the node
      args:              # Build arguments for versioning and environment
        - COMMIT=${GIT_COMMIT:-latest}  # Git commit hash for versioning
        - VERSION=${VERSION:-dev}       # Version tag for the build
        - BUILDNUM=${BUILD_NUMBER:-0}   # Build number for CI/CD
        - BRANCH=${BRANCH_NAME:-master}   # Branch name for image tagging
        - ENVIRONMENT=${ENVIRONMENT:-dev} # Environment (dev, staging, prod)
    image: ${REGISTRY_URL}/${IMAGE_NAME}:${BRANCH_NAME:-master}_latest  # Pull latest version
    container_name: ${CONTAINER_NAME_PREFIX:-geth}-node-${GIT_COMMIT:-latest}  # Container name with commit hash
    pull_policy: always # Always pull the latest image from the registry
    restart: unless-stopped  # Automatically restart on failure
    ports:
      - "${HTTP_PORT:-8545}:8545"  # HTTP RPC - For API calls and interactions
      - "${WS_PORT:-8546}:8546"    # WebSocket RPC - For subscription-based APIs
      - "${P2P_PORT:-30303}:30303" # P2P TCP - For peer communication
      - "${P2P_PORT:-30303}:30303/udp" # P2P UDP - For node discovery
    volumes:
      - node-data:/data  # Persistent volume for blockchain data
    command: >
      --datadir=/data
      --http
      --http.addr=0.0.0.0
      --http.api=${HTTP_API:-eth,net,web3,debug,admin,personal}
      --ws
      --ws.addr=0.0.0.0
      --ws.api=${WS_API:-eth,net,web3,debug}
      --nodiscover
      --dev
      --dev.period=0
      --allow-insecure-unlock
    networks:
      - go-ethereum-net  # Connect to the custom bridge network
    healthcheck:  # Monitor node health
      test: ["CMD", "geth", "attach", "--exec", "eth.syncing"]  # Check sync status
      interval: ${HEALTHCHECK_INTERVAL:-10s}  # Check every 10 seconds
      timeout: ${HEALTHCHECK_TIMEOUT:-5s}     # Timeout after 5 seconds
      retries: ${HEALTHCHECK_RETRIES:-5}      # Retry 5 times before marking unhealthy
      start_period: ${HEALTHCHECK_START_PERIOD:-20s}  # Initial grace period

  # ============================================================================
  # Development alltools service
  # ============================================================================
  # This service provides a container with all Ethereum CLI alltools:
  # - geth, clef, puppeth, and other utilities
  # - Connected to the node service
  # - Persistent volume for development data
  # ============================================================================
  alltools:
    build:
      context: ..         # Build context is the project root directory
      dockerfile: ./ci/Dockerfile.alltools  # Using the master alltools Dockerfile
      args:              # Build arguments for versioning and environment
        - COMMIT=${GIT_COMMIT:-latest}  # Git commit hash for versioning
        - VERSION=${VERSION:-dev}       # Version tag for the build
        - BUILDNUM=${BUILD_NUMBER:-0}   # Build number for CI/CD
        - BRANCH=${BRANCH_NAME:-master}   # Branch name for image tagging
        - ENVIRONMENT=${ENVIRONMENT:-dev} # Environment (dev, staging, prod)
    image: ${REGISTRY_URL}/${IMAGE_NAME}-alltools:${BRANCH_NAME:-master}_latest  # Pull latest version
    container_name: ${CONTAINER_NAME_PREFIX:-geth}-alltools-${GIT_COMMIT:-latest}  # Container name with commit hash
    pull_policy: always # Always pull the latest image from the registry
    depends_on:
      - node  # Ensure the node service starts first
    volumes:
      - alltools-data:/data  # Persistent volume for development data
    environment:
      - ETHEREUM_RPC=http://${NODE_SERVICE_NAME:-node}:8545  # Point to the node's RPC endpoint
    networks:
      - go-ethereum-net  # Connect to the same network as the node
    command: tail -f /dev/null  # Keep the container running

# ============================================================================
# Network Configuration
# ============================================================================
# Custom bridge network for container communication
# ============================================================================
networks:
  go-ethereum-net:
    driver: bridge  # Standard bridge network for container communication

# ============================================================================
# Volume Configuration
# ============================================================================
# Persistent volumes for blockchain and development data
# ============================================================================
volumes:
  node-data:  # Persistent volume for blockchain data
  alltools-data:  # Persistent volume for development alltools data

# ============================================================================
# Example Commands
# ============================================================================
# 1. Start services with default configuration:
#    docker-compose --env-file ci/.env -f ci/docker-compose.yml up -d
#
# 2. Start services with specific branch:
#    BRANCH_NAME=master docker-compose --env-file ci/.env -f ci/docker-compose.yml up -d
#
# 3. Rebuild and start services:
#    docker-compose --env-file ci/.env -f ci/docker-compose.yml up -d --build
#
# 4. View service logs:
#    docker-compose --env-file ci/.env -f ci/docker-compose.yml logs -f
#
# 5. Stop services:
#    docker-compose --env-file ci/.env -f ci/docker-compose.yml down
#
# 6. Stop services and remove volumes:
#    docker-compose --env-file ci/.env -f ci/docker-compose.yml down -v
#
# 7. Access node console:
#    docker exec -it geth-node geth attach
#
# 8. Access alltools container:
#    docker exec -it geth-alltools /bin/sh
# ============================================================================ 