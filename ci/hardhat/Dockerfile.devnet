# ============================================================================
# Streamlined DevNet Dockerfile for Go Ethereum
# This Dockerfile creates a development network image with predeployed contracts
# ============================================================================

# ============================================================================
# Stage 1: Runtime base image (FROM)
# ============================================================================
FROM ghcr.io/vepaks/go-ethereum_alltools:master-latest

# ============================================================================
# Stage 2: Build-time operations
# ============================================================================
# Install build & runtime dependencies in a single layer to reduce image size
RUN apk add --no-cache \
    nodejs \
    npm \
    curl \
    jq \
    bash

# Set working directory for the Hardhat project
WORKDIR /app

# BUILD-TIME: Package installation and compilation
# Copy package files first to leverage layer caching
COPY hardhat/package*.json ./
RUN npm install
RUN npm install dotenv @openzeppelin/contracts

# BUILD-TIME: Copy and compile smart contracts
COPY hardhat/ ./
RUN npx hardhat compile

# BUILD-TIME: Copy initialization scripts and configuration
COPY ./ci/hardhat/init-devnet.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/init-devnet.sh

# ============================================================================
# Stage 3: Runtime configuration
# ============================================================================

# RUNTIME: Health monitoring configuration
# Add a healthcheck to verify the node is responsive
HEALTHCHECK --interval=5s --timeout=3s --start-period=10s --retries=10 \
  CMD curl -f -X POST -H "Content-Type: application/json" \
      --data '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}' \
      http://localhost:8545 || exit 1

# RUNTIME: Environment variables configuration
# Default environment variables with sensible values
ENV GETH_ARGS="--dev \
    --http \
    --http.addr 0.0.0.0 \
    --http.port 8545 \
    --http.api eth,net,web3,debug,miner \
    --http.corsdomain '*' \
    --ws \
    --ws.addr 0.0.0.0 \
    --ws.port 8546 \
    --ws.api eth,net,web3,debug,miner \
    --ws.origins '*' \
    --allow-insecure-unlock \
    --rpc.allow-unprotected-txs \
    --nodiscover \
    --miner.gaslimit 11500000 \
    --miner.gasprice 1000000" \
    GAS_LIMIT=11500000 \
    GAS_PRICE=1000000

# RUNTIME: Network configuration
# Expose ports for HTTP-RPC, WS-RPC and P2P
EXPOSE 8545 8546 30303 30303/udp

# RUNTIME: Container startup configuration
# Use the initialization script as entry point
ENTRYPOINT ["/usr/local/bin/init-devnet.sh"]