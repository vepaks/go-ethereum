# Docker Build and Push Workflow
# Simplified workflow for building and pushing Docker images to GitHub Container Registry
name: Docker Build and Push

# Workflow Trigger Configuration
# Only runs when a pull request is closed (merged) to master or develop branches
on:
  pull_request:
    types: [closed]
    branches:
      - master    # Production branch
      - develop   # Staging branch

jobs:
  build-and-push:
    # Conditional execution: Only run if the PR was actually merged and has the 'CI:Build' label
    if: github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'CI:Build')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # Step 1: Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set environment variable based on target branch with simplified logic
      - name: Set environment and tags
        id: set-metadata
        run: |
          # Set environment based on branch
          if [[ "${{ github.event.pull_request.base.ref }}" == "master" ]]; then
            echo "ENVIRONMENT=prod" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=stage" >> $GITHUB_ENV
          fi
          
          # Extract branch name and commit SHA for simpler tagging
          BRANCH="${{ github.event.pull_request.base.ref }}"
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          
          # Set tags for both images using branch-latest and branch-sha convention
          echo "MAIN_TAGS=ghcr.io/${{ github.repository }}:${BRANCH}-latest,ghcr.io/${{ github.repository }}:${BRANCH}-${SHORT_SHA}" >> $GITHUB_ENV
          echo "ALLTOOLS_TAGS=ghcr.io/${{ github.repository }}_alltools:${BRANCH}-latest,ghcr.io/${{ github.repository }}_alltools:${BRANCH}-${SHORT_SHA}" >> $GITHUB_ENV

      # Step 3: Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 4: Authenticate with GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 5: Build and push the main geth Docker image
      - name: Build and push main Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./ci/Dockerfile
          push: true
          tags: ${{ env.MAIN_TAGS }}
          labels: |
            org.opencontainers.image.title=${{ github.event.pull_request.base.ref }}_${{ env.ENVIRONMENT }}
            org.opencontainers.image.description=go-ethereum application image | Branch: ${{ github.event.pull_request.base.ref }} | Environment: ${{ env.ENVIRONMENT }}
            org.opencontainers.image.version=${{ github.sha }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          # Only pass essential build arguments
          build-args: |
            COMMIT=${{ github.sha }}
            VERSION=${{ github.sha }}

      # Step 6: Build and push the alltools Docker image
      - name: Build and push alltools Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./ci/Dockerfile.alltools
          push: true
          tags: ${{ env.ALLTOOLS_TAGS }}
          labels: |
            org.opencontainers.image.title=${{ github.event.pull_request.base.ref }}_${{ env.ENVIRONMENT }}_AllTools
            org.opencontainers.image.description=go-ethereum development image with all tools | Branch: ${{ github.event.pull_request.base.ref }} | Environment: ${{ env.ENVIRONMENT }}
            org.opencontainers.image.version=${{ github.sha }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          # Only pass essential build arguments
          build-args: |
            COMMIT=${{ github.sha }}
            VERSION=${{ github.sha }}