name: Deploy Devnet

on:
  pull_request:
    types: [closed]
    branches:
      - master
      - develop

jobs:
  build-and-push-devnet:
    if: github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'CI:Deploy')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set environment and tags
        id: set-metadata
        run: |
          # Set environment based on branch
          if [[ "${{ github.event.pull_request.base.ref }}" == "master" ]]; then
            echo "ENVIRONMENT=prod" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=stage" >> $GITHUB_ENV
          fi
          
          # Extract branch name and commit SHA for simpler tagging
          BRANCH="${{ github.event.pull_request.base.ref }}"
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          
          # Set tags for devnet image
          echo "DEVNET_TAGS=ghcr.io/${{ github.repository }}_devnet:${BRANCH}-latest,ghcr.io/${{ github.repository }}_devnet:${BRANCH}-${SHORT_SHA}" >> $GITHUB_ENV
          echo "BRANCH=${BRANCH}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push devnet Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./ci/hardhat/Dockerfile.devnet
          push: true
          tags: ${{ env.DEVNET_TAGS }}
          labels: |
            org.opencontainers.image.title=go-ethereum_devnet
            org.opencontainers.image.description=go-ethereum devnet image with Hardhat integration | Branch: ${{ env.BRANCH }} | Environment: ${{ env.ENVIRONMENT }}
            org.opencontainers.image.version=${{ github.sha }}
          build-args: |
            COMMIT=${{ github.sha }}
            VERSION=${{ github.sha }}

  test-devnet:
    needs: build-and-push-devnet
    if: github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'CI:Deploy')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create test directory
        run: mkdir -p ./test-results
      
      - name: Copy .env template for testing
        run: |
          echo "Using .env.template for deployment configuration"
          cp ci/hardhat/.env.template hardhat/.env

      - name: Deploy and test devnet with Docker Compose
        run: |
          # Set the image to use in Docker Compose
          export DEVNET_IMAGE=ghcr.io/${{ github.repository }}_devnet:${{ env.BRANCH }}-latest
          export BRANCH=${{ github.event.pull_request.base.ref }}

          # Start the devnet using Docker Compose
          cd ci/hardhat
          docker-compose up -d devnet

          # Wait for devnet to be healthy
          echo "Waiting for devnet to be ready..."
          docker-compose ps -a
          
          # Check for container health status
          max_attempts=30
          attempts=0
          
          while [ $attempts -lt $max_attempts ]; do
            health=$(docker inspect --format='{{.State.Health.Status}}' $(docker-compose ps -q devnet))
            if [ "$health" == "healthy" ]; then
              echo "Devnet is healthy and ready!"
              break
            fi
            echo "Waiting for devnet to be healthy (attempt $attempts/$max_attempts)..."
            attempts=$((attempts + 1))
            sleep 2
          done

          if [ $attempts -eq $max_attempts ]; then
            echo "Devnet failed to become healthy within timeout"
            docker-compose logs devnet
            exit 1
          fi

          # Run tests with Docker Compose
          docker-compose up --exit-code-from hardhat-tests hardhat-tests

      - name: Show devnet logs on failure
        if: failure()
        run: |
          cd ci/hardhat
          docker-compose logs devnet

      - name: Cleanup
        if: always()
        run: |
          cd ci/hardhat
          docker-compose down -v